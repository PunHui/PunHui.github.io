<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js 环境变量</title>
      <link href="/2022/021442812.html"/>
      <url>/2022/021442812.html</url>
      
        <content type="html"><![CDATA[<h2 id="在-nodejs-里创建两个文件夹"><a href="#在-nodejs-里创建两个文件夹" class="headerlink" title="在 nodejs 里创建两个文件夹"></a>在 nodejs 里创建两个文件夹</h2><pre class=" language-bash"><code class="language-bash">node_cachenode_global</code></pre><h2 id="打开-CMD-执行命令"><a href="#打开-CMD-执行命令" class="headerlink" title="打开 CMD 执行命令"></a>打开 CMD 执行命令</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"node_global文件的路径"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"node_cache的文件路径"</span>例如：<span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"D:\nodejs\node_global"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"D:\nodejs\node_cache"</span></code></pre><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><pre class=" language-bash"><code class="language-bash">创建一个名为 NODE_PATH 值为 D:\nodejs\node_global\node_modules 的变量</code></pre><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><pre class=" language-bash"><code class="language-bash">Path 里新建一个 D:\nodejs\node_global\ 变量</code></pre><h2 id="最后将-nodejs-里的所有文件都放-node-global-里面"><a href="#最后将-nodejs-里的所有文件都放-node-global-里面" class="headerlink" title="最后将 nodejs 里的所有文件都放 node_global 里面"></a>最后将 nodejs 里的所有文件都放 node_global 里面</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> execjsprint<span class="token punctuation">(</span>execjs.get<span class="token punctuation">(</span><span class="token punctuation">)</span>.name<span class="token punctuation">)</span></code></pre><p>输出结果就是</p><pre class=" language-bash"><code class="language-bash">Node.js <span class="token punctuation">(</span>V8<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyexecJS 调用包</title>
      <link href="/2022/021335107.html"/>
      <url>/2022/021335107.html</url>
      
        <content type="html"><![CDATA[<h2 id="NodeJS-下载的包在-Python-中无法使用"><a href="#NodeJS-下载的包在-Python-中无法使用" class="headerlink" title="NodeJS 下载的包在 Python 中无法使用"></a>NodeJS 下载的包在 Python 中无法使用</h2><h3 id="在-Python-中下载包"><a href="#在-Python-中下载包" class="headerlink" title="在 Python 中下载包"></a>在 Python 中下载包</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> 自己需要的包</code></pre><p>将文件移到自己程序所在的文件夹里就 OK 了</p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 的一些异常</title>
      <link href="/2022/02131510.html"/>
      <url>/2022/02131510.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载包的问题"><a href="#下载包的问题" class="headerlink" title="下载包的问题"></a>下载包的问题</h2><h3 id="下载异常"><a href="#下载异常" class="headerlink" title="下载异常"></a>下载异常</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> ERR<span class="token operator">!</span> code EPERM<span class="token function">npm</span> ERR<span class="token operator">!</span> syscall <span class="token function">mkdir</span><span class="token function">npm</span> ERR<span class="token operator">!</span> path D:\nodejs\node_cache\_cacache<span class="token function">npm</span> ERR<span class="token operator">!</span> errno EPERM<span class="token function">npm</span> ERR<span class="token operator">!</span> FetchError: Invalid response body <span class="token keyword">while</span> trying to fetch https://registry.npmjs.org/crypto-js: EPERM: operation not permitted, <span class="token function">mkdir</span> <span class="token string">'D:\nodejs\node_cache\_cacache'</span></code></pre><p>解决办法: 删除</p><pre class=" language-bash"><code class="language-bash">“C:/Users/用户名”目录下的.npmrc文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyexecJS 的一些异常处理</title>
      <link href="/2022/021340749.html"/>
      <url>/2022/021340749.html</url>
      
        <content type="html"><![CDATA[<h2 id="GBK-编码问题"><a href="#GBK-编码问题" class="headerlink" title="GBK 编码问题"></a>GBK 编码问题</h2><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>打开 subprocess.py 文件，Ctrl + f 搜索 encoding 找到如下的格式的函数</p><pre class=" language-bash"><code class="language-bash">    def __init__<span class="token punctuation">(</span>self, args, bufsize<span class="token operator">=</span>-1, executable<span class="token operator">=</span>None,                 stdin<span class="token operator">=</span>None, stdout<span class="token operator">=</span>None, stderr<span class="token operator">=</span>None,                 preexec_fn<span class="token operator">=</span>None, close_fds<span class="token operator">=</span>True,                 shell<span class="token operator">=</span>False, cwd<span class="token operator">=</span>None, env<span class="token operator">=</span>None, universal_newlines<span class="token operator">=</span>None,                 startupinfo<span class="token operator">=</span>None, creationflags<span class="token operator">=</span>0,                 restore_signals<span class="token operator">=</span>True, start_new_session<span class="token operator">=</span>False,                 pass_fds<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, *, encoding<span class="token operator">=</span>None, errors<span class="token operator">=</span>None, text<span class="token operator">=</span>None<span class="token punctuation">)</span>:        <span class="token string">""</span><span class="token string">"Create new Popen instance."</span><span class="token string">""</span>        _cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>将 encoding 的值修改成 utf-8 即可</p><pre class=" language-bash"><code class="language-bash">    def __init__<span class="token punctuation">(</span>self, args, bufsize<span class="token operator">=</span>-1, executable<span class="token operator">=</span>None,                 stdin<span class="token operator">=</span>None, stdout<span class="token operator">=</span>None, stderr<span class="token operator">=</span>None,                 preexec_fn<span class="token operator">=</span>None, close_fds<span class="token operator">=</span>True,                 shell<span class="token operator">=</span>False, cwd<span class="token operator">=</span>None, env<span class="token operator">=</span>None, universal_newlines<span class="token operator">=</span>None,                 startupinfo<span class="token operator">=</span>None, creationflags<span class="token operator">=</span>0,                 restore_signals<span class="token operator">=</span>True, start_new_session<span class="token operator">=</span>False,                 pass_fds<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, *, encoding<span class="token operator">=</span><span class="token string">"utf-8"</span>, errors<span class="token operator">=</span>None, text<span class="token operator">=</span>None<span class="token punctuation">)</span>:        <span class="token string">""</span><span class="token string">"Create new Popen instance."</span><span class="token string">""</span>        _cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 博客搭建中的异常解决方法</title>
      <link href="/2022/021165054.html"/>
      <url>/2022/021165054.html</url>
      
        <content type="html"><![CDATA[<h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><p><a href="https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">推荐b站视频1</a></p><p><a href="https://www.bilibili.com/video/BV1je41147Ma?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">推荐b站视频2</a> 他的顺序有些乱，完成上面的<br>搭建过程后可以看这个视频搞主题</p><p><a href="https://blog.csdn.net/jspnetcn/article/details/104111651">主题搭建教程，主要看主题！！！</a></p><h2 id="异常解决方法"><a href="#异常解决方法" class="headerlink" title="异常解决方法"></a>异常解决方法</h2><h3 id="上传文件后发现网站没有变化"><a href="#上传文件后发现网站没有变化" class="headerlink" title="上传文件后发现网站没有变化"></a>上传文件后发现网站没有变化</h3><p>有时候需要等待两三分钟才有变化，如果迟迟没有变化就清理缓存</p><pre class=" language-bash"><code class="language-bash">hexo clean</code></pre><p>清理缓存后再运行一下命令</p><pre class=" language-bash"><code class="language-bash">hexo ghexo d</code></pre><h3 id="文件上传不成功"><a href="#文件上传不成功" class="headerlink" title="文件上传不成功"></a>文件上传不成功</h3><pre class=" language-bash"><code class="language-bash">SL SSL_read: Connection was reset, errno 10054FATAL <span class="token punctuation">{</span>  err: Error: Spawn failed      at ChildProcess.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>D:/blog/node_modules/hexo-util/lib/spawn.js:51:21<span class="token punctuation">)</span>      at ChildProcess.emit <span class="token punctuation">(</span>node:events:390:28<span class="token punctuation">)</span>      at ChildProcess.cp.emit <span class="token punctuation">(</span>D:/blog/node_modules/cross-spawn/lib/enoent.js:34:29<span class="token punctuation">)</span>      at Process.ChildProcess._handle.onexit <span class="token punctuation">(</span>node:internal/child_process:290:12<span class="token punctuation">)</span> <span class="token punctuation">{</span>    code: 128  <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p>只是网络问题，重新来几次就行</p><h3 id="代码块中大括号变成符号"><a href="#代码块中大括号变成符号" class="headerlink" title="代码块中大括号变成符号"></a>代码块中大括号变成符号</h3><p>需要手动修改文件，这里我用的是 hexo-prism-plugin 插件，先找到 hexo-prism-plugin 文件，比如我的路径</p><pre class=" language-bash"><code class="language-bash">D:/blog/node_modules/hexo-prism-plugin</code></pre><p>打开文件，找到 src 文件打开，修改 index.js<br>const map &#x3D; {<br>    ‘&#39;’: ‘&#x2F;‘’,<br>    ‘&amp;’: ‘&amp;’,<br>    ‘&gt;’: ‘&gt;’,<br>    ‘&lt;’: ‘&lt;’,<br>    ‘&quot;’: ‘“‘,<br>    ‘&amp;#123;’: ‘{‘,<br>    ‘&amp;#125;’: ‘}’<br>};<br>就 OK 了</p><h2 id="主题的一些功能配置"><a href="#主题的一些功能配置" class="headerlink" title="主题的一些功能配置"></a>主题的一些功能配置</h2><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，在 Hexo 根目录下运行命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre class=" language-bash"><code class="language-bash">highlight:  enable: <span class="token boolean">false</span>prism_plugin:  mode: <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  theme: <span class="token string">'tomorrow'</span>  line_number: <span class="token boolean">false</span>    <span class="token comment" spellcheck="true"># default false</span>  custom_css:</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JSDuck分括号</title>
      <link href="/2022/021112057.html"/>
      <url>/2022/021112057.html</url>
      
        <content type="html"><![CDATA[<p>虽然在 PyCharm 里很方便的就能把括号里的混淆代码挖出来<br>但是我就是懒，偏要写一个自动挖代码的工具</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class=" language-bash"><code class="language-bash"><span class="token string">""</span><span class="token string">"JSFuck 加密将括号里的代码筛选出来"</span><span class="token string">""</span>def jie_xi<span class="token punctuation">(</span><span class="token punctuation">)</span>:    with open<span class="token punctuation">(</span><span class="token string">'你的文件路径'</span>, <span class="token string">'r'</span><span class="token punctuation">)</span> as f:        <span class="token keyword">return</span> f.read<span class="token punctuation">(</span><span class="token punctuation">)</span>JS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>def if_true<span class="token punctuation">(</span>i, b<span class="token punctuation">)</span>:    try:        JS<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token string">"{JS[b]}{i}"</span>    except KeyError:        JS<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> idef if_false<span class="token punctuation">(</span><span class="token punctuation">)</span>:    K <span class="token operator">=</span> 0    <span class="token keyword">for</span> k, <span class="token function">v</span> <span class="token keyword">in</span> JS.items<span class="token punctuation">(</span><span class="token punctuation">)</span>:        K <span class="token operator">=</span> int<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">return</span> K + 1def main<span class="token punctuation">(</span><span class="token punctuation">)</span>:    A <span class="token operator">=</span> 0    B <span class="token operator">=</span> 0    <span class="token keyword">for</span> i <span class="token keyword">in</span> jie_xi<span class="token punctuation">(</span><span class="token punctuation">)</span>:        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'('</span><span class="token keyword">:</span>            A +<span class="token operator">=</span> 1            if_true<span class="token punctuation">(</span>i, B<span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">')'</span><span class="token keyword">:</span>            A -<span class="token operator">=</span> 1            if_true<span class="token punctuation">(</span>i, B<span class="token punctuation">)</span>            <span class="token keyword">if</span> A <span class="token operator">==</span> 0:                B <span class="token operator">=</span> if_false<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> A <span class="token operator">!=</span> 0:            if_true<span class="token punctuation">(</span>i, B<span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>JS<span class="token punctuation">[</span>17<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Word</title>
      <link href="/2022/021016107.html"/>
      <url>/2022/021016107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
