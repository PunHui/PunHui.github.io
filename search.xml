<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>某云音乐评论逆向思路</title>
      <link href="/2022/030163396.html"/>
      <url>/2022/030163396.html</url>
      
        <content type="html"><![CDATA[<h2 id="分析含有评论数据的-url"><a href="#分析含有评论数据的-url" class="headerlink" title="分析含有评论数据的 url"></a>分析含有评论数据的 url</h2><blockquote><p>url <a href="https://music.163.com/weapi/comment/resource/comments/get?csrf_token=">https://music.163.com/weapi/comment/resource/comments/get?csrf_token=</a></p></blockquote><p><strong>参数</strong></p><pre class=" language-bash"><code class="language-bash">params: KXsVFljZts/UB3L4koCMJi182/cF5mfA1pjcLUrhRSzTC16hyG/wvmMNFW0SJWj9P509ssPhFg5xZb5oxXwWALH5MKJk4k8RR0esI294Z86rdDycim1ifY9TByErM07sr9QmSIkFmTOiV4ak6C4KEwLBybyWoPq90n7YRufNIi47TMHDiDuSRDgZWFJ1scevA52/uDXpTBZLHKqoB4cl3zrxvT1GXSpJtLnUn/V1J63dFoxYD9GoKvsIalrYbM3WanaaTtDSZEgDvd7VgNrWcDlGDGv+N/D/Yyuv5x1afpE<span class="token operator">=</span>encSecKey: 3fe84741e57f7b68bd41527fb4995ec86e87f6885838bd778a10810412e897c55c11f582ade7542ae403164343277aafa030a0736a041ad40b1a6eca32e66e506a017086c7615d8b22430ab3ffa7498e99fafc660625aa0c89ee4bcb7c5e409555205ea2715c940ce258b54ff9a20d42d71d04933b24c33dcd1a92bb6435e578</code></pre><p><strong>可以知道 params 和 encSecKey 参数被加了密</strong></p><h2 id="在哪加的密"><a href="#在哪加的密" class="headerlink" title="在哪加的密?"></a>在哪加的密?</h2><p>设置 HXR 断点，根据调用堆栈一个一个的找，最后在 tOx.beOx 发现可能是没有加密的参数</p><pre class=" language-bash"><code class="language-bash">i0x:    csrf_token: <span class="token string">""</span>    cursor: <span class="token string">"-1"</span>    offset: <span class="token string">"0"</span>    orderType: <span class="token string">"1"</span>    pageNo: <span class="token string">"1"</span>    pageSize: <span class="token string">"20"</span>    rid: <span class="token string">"R_SO_4_492390949"</span>    threadId: <span class="token string">"R_SO_4_492390949"</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span>: Object    mx4B: -1</code></pre><p>加密的参数在 bVj0x 里，直接搜索 bVj0x，将看到4个结果，都看一遍过去后找到 bVj0x 的加密过程</p><pre class=" language-bash"><code class="language-bash">var bVj0x <span class="token operator">=</span> window.asrsea<span class="token punctuation">(</span>JSON.stringify<span class="token punctuation">(</span>i0x<span class="token punctuation">)</span>, bsR5W<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"流泪"</span>, <span class="token string">"强"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>, bsR5W<span class="token punctuation">(</span>Xp7i.md<span class="token punctuation">)</span>, bsR5W<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"爱心"</span>, <span class="token string">"女孩"</span>, <span class="token string">"惊恐"</span>, <span class="token string">"大笑"</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token punctuation">;</span></code></pre><p><strong>基本可以断定这里就是加密的地方</strong></p><h2 id="分析加密的参数"><a href="#分析加密的参数" class="headerlink" title="分析加密的参数"></a>分析加密的参数</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><pre class=" language-bash"><code class="language-bash">JSON.stringify<span class="token punctuation">(</span>i0x<span class="token punctuation">)</span></code></pre><p>我们可以在控制台上输出 JSON.stringify(i0x) 看看,其结果就是刚才在作用域里看到的结果</p><pre class=" language-bash"><code class="language-bash"><span class="token string">'{"rid":"R_SO_4_492390949","threadId":"R_SO_4_492390949","pageNo":"1","pageSize":"20","cursor":"-1","offset":"0","orderType":"1","csrf_token":""}'</span></code></pre><p>JSON.stringify 方法将 JavaScript 对象转换为字符串<br>其参数和刚才在作用域里看到的一样</p><blockquote><p>注意，这是字符串类型</p></blockquote><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><pre class=" language-bash"><code class="language-bash">bsR5W<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"流泪"</span>, <span class="token string">"强"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>直接搜索 流泪或者强<br>可以看到一个字典</p><pre class=" language-bash"><code class="language-bash">    Xp7i.emj <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"色"</span><span class="token keyword">:</span> <span class="token string">"00e0b"</span>,        <span class="token string">"流感"</span><span class="token keyword">:</span> <span class="token string">"509f6"</span>,        <span class="token string">"这边"</span><span class="token keyword">:</span> <span class="token string">"259df"</span>,        <span class="token string">"弱"</span><span class="token keyword">:</span> <span class="token string">"8642d"</span>,        <span class="token string">"嘴唇"</span><span class="token keyword">:</span> <span class="token string">"bc356"</span>,        <span class="token punctuation">..</span>.        <span class="token string">"流泪"</span><span class="token keyword">:</span> <span class="token string">"01000"</span>,        <span class="token string">"强"</span><span class="token keyword">:</span> <span class="token string">"1"</span>,        <span class="token punctuation">..</span>.    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>那么 bsR5W 的参数极有可能是其对应的值，也就是: 01000 和 1</strong></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><pre class=" language-bash"><code class="language-bash">bsR5W<span class="token punctuation">(</span>Xp7i.md<span class="token punctuation">)</span></code></pre><p>老样子，搜索 Xp7i.md，结果会看到</p><pre class=" language-bash"><code class="language-bash">Xp7i.md <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"色"</span>, <span class="token string">"流感"</span>, <span class="token string">"这边"</span>, <span class="token string">"弱"</span>, <span class="token string">"嘴唇"</span>, <span class="token string">"亲"</span>, <span class="token string">"开心"</span>, <span class="token string">"呲牙"</span>,  <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><pre class=" language-bash"><code class="language-bash">bsR5W<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"爱心"</span>, <span class="token string">"女孩"</span>, <span class="token string">"惊恐"</span>, <span class="token string">"大笑"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol><li>可以看到，它们使用的都是一个函数 bsR5W</li><li>而且值还是固定的</li></ol><p><strong>结论: 这3个参数很可能都是固定的值</strong></p><blockquote><p>可以自己在 window.asrsea 函数中打上断点，刷新几个页面，查看后面3个参数是否固定</p></blockquote><h2 id="分析-window-asrsea-函数"><a href="#分析-window-asrsea-函数" class="headerlink" title="分析 window.asrsea 函数"></a>分析 window.asrsea 函数</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> d<span class="token punctuation">(</span>d, e, f, g<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var h <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      , i <span class="token operator">=</span> a<span class="token punctuation">(</span>16<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> h.encText <span class="token operator">=</span> b<span class="token punctuation">(</span>d, g<span class="token punctuation">)</span>,    h.encText <span class="token operator">=</span> b<span class="token punctuation">(</span>h.encText, i<span class="token punctuation">)</span>,    h.encSecKey <span class="token operator">=</span> c<span class="token punctuation">(</span>i, e, f<span class="token punctuation">)</span>,    h<span class="token punctuation">}</span></code></pre><p>点进来后变成了 d 函数，看也看不懂，也意味着开始扣代码了!!!</p><p><strong>我们先把 e, f, g, 的值写在 js 文件中，然后开始专心的抠 d 函数</strong></p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p><strong>一下是作者重新回顾时所遇到的所以问题以及解决方法</strong></p><h3 id="缺啥补啥"><a href="#缺啥补啥" class="headerlink" title="缺啥补啥"></a>缺啥补啥</h3><pre class=" language-bash"><code class="language-bash">d:\Visual Studio Code\文件1\JS实验\4.js:3        i <span class="token operator">=</span> a<span class="token punctuation">(</span>16<span class="token punctuation">)</span><span class="token punctuation">;</span>            ^TypeError: a is not a <span class="token keyword">function</span></code></pre><p>在 VS Code 中运行代码会出现以上的错误提示你没有 a 函数<br>我们直接在浏览器里搜索 a 函数后点进去</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> a<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var d, e, b <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>, c <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> 0<span class="token punctuation">;</span> a <span class="token operator">></span> d<span class="token punctuation">;</span> d +<span class="token operator">=</span> 1<span class="token punctuation">)</span>        e <span class="token operator">=</span> Math.random<span class="token punctuation">(</span><span class="token punctuation">)</span> * b.length,        e <span class="token operator">=</span> Math.floor<span class="token punctuation">(</span>e<span class="token punctuation">)</span>,        c +<span class="token operator">=</span> b.charAt<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">}</span></code></pre><p>直接将代码复制进来，然后重复以上操作，直到不报错为止</p><h3 id="下载库"><a href="#下载库" class="headerlink" title="下载库"></a>下载库</h3><blockquote><p>在终端，VS Code 在 VS Code 的终端运行一下代码</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> crypto-js</code></pre><p>crypto-js 需要什么就下什么，当然，这次就是需要 crypto-js 库</p><p>下载好后在 js 文件中添加一下代码</p><pre class=" language-bash"><code class="language-bash">var CryptoJS <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'crypto-js'</span><span class="token punctuation">)</span></code></pre><p><strong>require 的意思是导入</strong></p><h3 id="搜索结果很多"><a href="#搜索结果很多" class="headerlink" title="搜索结果很多"></a>搜索结果很多</h3><p>可以尝试添加关键字，比如搜索 c 会有 18590 个结果<br>如果我们添加了 function 会怎么样?</p><blockquote><p>当然，添加关键字也得保持语句的规范，比如这个例子: function c</p></blockquote><p>会发现只有 25 个结果，大大缩少了范围</p><h3 id="NodeJS-没有-window-对象"><a href="#NodeJS-没有-window-对象" class="headerlink" title="NodeJS 没有 window 对象"></a>NodeJS 没有 window 对象</h3><p>可以添加一下代码</p><pre class=" language-bash"><code class="language-bash">var window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以后遇到什么无法运行对象都可以这样做</p><h3 id="搜索函数名结果没有函数"><a href="#搜索函数名结果没有函数" class="headerlink" title="搜索函数名结果没有函数"></a>搜索函数名结果没有函数</h3><p>比如:</p><pre class=" language-bash"><code class="language-bash">ReferenceError: bitsPerDigit is not defined</code></pre><p>搜索后没有发现函数，也就是说它不是函数，我们可以看看其他的值，最后会发现以下代码</p><pre class=" language-bash"><code class="language-bash">var maxDigits,     ZERO_ARRAY,      bigZero,      bigOne,      dpl10,      lr10,      hexatrigesimalToChar,      hexToChar,      highBitMasks,      lowBitMasks,     biRadixBase <span class="token operator">=</span> 2,      biRadixBits <span class="token operator">=</span> 16,      bitsPerDigit <span class="token operator">=</span> biRadixBits,      biRadix <span class="token operator">=</span> 65536,      biHalfRadix <span class="token operator">=</span> biRadix <span class="token operator">>></span><span class="token operator">></span> 1,      biRadixSquared <span class="token operator">=</span> biRadix * biRadix,      maxDigitVal <span class="token operator">=</span> biRadix - 1,      maxInteger <span class="token operator">=</span> 9999999999999998<span class="token punctuation">;</span>setMaxDigits<span class="token punctuation">(</span>20<span class="token punctuation">)</span>,dpl10 <span class="token operator">=</span> 15,lr10 <span class="token operator">=</span> biFromNumber<span class="token punctuation">(</span>1e15<span class="token punctuation">)</span>,hexatrigesimalToChar <span class="token operator">=</span> new Array<span class="token punctuation">(</span><span class="token string">"0"</span>,<span class="token string">"1"</span>,<span class="token string">"2"</span>,<span class="token string">"3"</span>,<span class="token string">"4"</span>,<span class="token string">"5"</span>,<span class="token string">"6"</span>,<span class="token string">"7"</span>,<span class="token string">"8"</span>,<span class="token string">"9"</span>,<span class="token string">"a"</span>,<span class="token string">"b"</span>,<span class="token string">"c"</span>,<span class="token string">"d"</span>,<span class="token string">"e"</span>,<span class="token string">"f"</span>,<span class="token string">"g"</span>,<span class="token string">"h"</span>,<span class="token string">"i"</span>,<span class="token string">"j"</span>,<span class="token string">"k"</span>,<span class="token string">"l"</span>,<span class="token string">"m"</span>,<span class="token string">"n"</span>,<span class="token string">"o"</span>,<span class="token string">"p"</span>,<span class="token string">"q"</span>,<span class="token string">"r"</span>,<span class="token string">"s"</span>,<span class="token string">"t"</span>,<span class="token string">"u"</span>,<span class="token string">"v"</span>,<span class="token string">"w"</span>,<span class="token string">"x"</span>,<span class="token string">"y"</span>,<span class="token string">"z"</span><span class="token punctuation">)</span>,hexToChar <span class="token operator">=</span> new Array<span class="token punctuation">(</span><span class="token string">"0"</span>,<span class="token string">"1"</span>,<span class="token string">"2"</span>,<span class="token string">"3"</span>,<span class="token string">"4"</span>,<span class="token string">"5"</span>,<span class="token string">"6"</span>,<span class="token string">"7"</span>,<span class="token string">"8"</span>,<span class="token string">"9"</span>,<span class="token string">"a"</span>,<span class="token string">"b"</span>,<span class="token string">"c"</span>,<span class="token string">"d"</span>,<span class="token string">"e"</span>,<span class="token string">"f"</span><span class="token punctuation">)</span>,highBitMasks <span class="token operator">=</span> new Array<span class="token punctuation">(</span>0,32768,49152,57344,61440,63488,64512,65024,65280,65408,65472,65504,65520,65528,65532,65534,65535<span class="token punctuation">)</span>,lowBitMasks <span class="token operator">=</span> new Array<span class="token punctuation">(</span>0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>像这种赋值语句我推荐全部复制下来</p><h2 id="最后工作"><a href="#最后工作" class="headerlink" title="最后工作"></a>最后工作</h2><p>在最后添加一下代码</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> token<span class="token punctuation">(</span>d, e, f, g<span class="token punctuation">)</span> <span class="token punctuation">{</span>    d <span class="token operator">=</span> JSON.stringify<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    var tokens <span class="token operator">=</span> doc<span class="token punctuation">(</span>d, e, f, g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tokens<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>doc 函数就是 d 函数，我修改了函数名，避免冲突</p></blockquote><p><strong>e, f, g 虽然是固定值，但是写在 Python 里会更加好，以便以后修改</strong><br><strong>注意 d 参数是不固定的!!!</strong></p><blockquote><p>d &#x3D; JSON.stringify(d) 添上这个函数我们直接在 Python 里写好字典即可，以便修改</p></blockquote><h2 id="最后放上一部分源码"><a href="#最后放上一部分源码" class="headerlink" title="最后放上一部分源码"></a>最后放上一部分源码</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre class=" language-bash"><code class="language-bash">def encryption<span class="token punctuation">(</span>d<span class="token punctuation">)</span>:    <span class="token string">""</span><span class="token string">"加密"</span><span class="token string">""</span>    e <span class="token operator">=</span> <span class="token string">'010001'</span>  <span class="token comment" spellcheck="true"># 固定值</span>    <span class="token comment" spellcheck="true"># 固定值</span>    fs <span class="token operator">=</span> <span class="token string">'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'</span>    g <span class="token operator">=</span> <span class="token string">'0CoJUm6Qyw8W8jud'</span>  <span class="token comment" spellcheck="true"># 固定值</span>    with open<span class="token punctuation">(</span><span class="token string">'你自己js文件名.js'</span>, <span class="token string">'r'</span>, encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> as f:        get <span class="token operator">=</span> execjs.compile<span class="token punctuation">(</span>f.read<span class="token punctuation">(</span><span class="token punctuation">))</span>        js <span class="token operator">=</span> <span class="token string">'token'</span>        demo <span class="token operator">=</span> get.call<span class="token punctuation">(</span>js, d, e, fs, g<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'params'</span><span class="token keyword">:</span> demo<span class="token punctuation">[</span><span class="token string">'encText'</span><span class="token punctuation">]</span>,        <span class="token string">'encSecKey'</span><span class="token keyword">:</span> demo<span class="token punctuation">[</span><span class="token string">'encSecKey'</span><span class="token punctuation">]</span>,    <span class="token punctuation">}</span>    <span class="token keyword">return</span> data</code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><blockquote><p>这是爬取评论的参数，而且还只是网站首页歌单的参数，不能用于爬取其他信息</p></blockquote><pre class=" language-bash"><code class="language-bash">d <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"rid"</span><span class="token keyword">:</span> <span class="token string">"A_PL_0_6727687679"</span>,    <span class="token string">"threadId"</span><span class="token keyword">:</span> <span class="token string">"A_PL_0_6727687679"</span>,    <span class="token string">"pageNo"</span><span class="token keyword">:</span> <span class="token string">"1"</span>,    <span class="token string">"pageSize"</span><span class="token keyword">:</span> <span class="token string">"40"</span>,    <span class="token string">"cursor"</span><span class="token keyword">:</span> <span class="token string">"-1"</span>,    <span class="token string">"offset"</span><span class="token keyword">:</span> <span class="token string">"0"</span>,    <span class="token string">"orderType"</span><span class="token keyword">:</span> <span class="token string">"1"</span>,    <span class="token string">"csrf_token"</span><span class="token keyword">:</span> <span class="token string">""</span><span class="token punctuation">}</span></code></pre><h3 id="其参数还有其他变化，具体自己去摸索，我放上一些有关信息"><a href="#其参数还有其他变化，具体自己去摸索，我放上一些有关信息" class="headerlink" title="其参数还有其他变化，具体自己去摸索，我放上一些有关信息"></a>其参数还有其他变化，具体自己去摸索，我放上一些有关信息</h3><pre class=" language-bash"><code class="language-bash"><span class="token string">'playlist'</span><span class="token keyword">:</span> <span class="token string">"A_PL_0_"</span>,  <span class="token comment" spellcheck="true"># 歌单</span><span class="token string">'dj'</span><span class="token keyword">:</span> <span class="token string">"A_DJ_1_"</span>,  <span class="token comment" spellcheck="true"># 电台节目</span><span class="token string">'program'</span><span class="token keyword">:</span> <span class="token string">"A_DJ_1_"</span>,<span class="token string">'album'</span><span class="token keyword">:</span> <span class="token string">"R_AL_3_"</span>,  <span class="token comment" spellcheck="true"># 专辑</span><span class="token string">'song'</span><span class="token keyword">:</span> <span class="token string">"R_SO_4_"</span>  <span class="token comment" spellcheck="true"># 歌曲</span></code></pre><blockquote><p>具体如果使用各位自己琢磨吧!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyExeJS 的使用</title>
      <link href="/2022/022051354.html"/>
      <url>/2022/022051354.html</url>
      
        <content type="html"><![CDATA[<h2 id="改良"><a href="#改良" class="headerlink" title="改良"></a>改良</h2><h3 id="崔庆才在书上写的"><a href="#崔庆才在书上写的" class="headerlink" title="崔庆才在书上写的"></a>崔庆才在书上写的</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> execjs<span class="token function">import</span> jsonprint<span class="token punctuation">(</span>execjs.get<span class="token punctuation">(</span><span class="token punctuation">)</span>.name<span class="token punctuation">)</span>node <span class="token operator">=</span> execjs.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">file</span> <span class="token operator">=</span> <span class="token string">'1.js'</span>ctx <span class="token operator">=</span> node.compile<span class="token punctuation">(</span>open<span class="token punctuation">(</span>file<span class="token punctuation">)</span>.read<span class="token punctuation">(</span><span class="token punctuation">))</span>item <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token keyword">:</span> <span class="token string">'凯文-杜兰特'</span>,    <span class="token string">'image'</span><span class="token keyword">:</span> <span class="token string">'durant.png'</span>,    <span class="token string">'birthday'</span><span class="token keyword">:</span> <span class="token string">'1988-09-29'</span>,    <span class="token string">'height'</span><span class="token keyword">:</span> <span class="token string">'208cm'</span>,    <span class="token string">'weight'</span><span class="token keyword">:</span> <span class="token string">'108.9KG'</span><span class="token punctuation">}</span>js <span class="token operator">=</span> f<span class="token string">"getToken({json.dumps(item, ensure_ascii=False)})"</span>print<span class="token punctuation">(</span>js<span class="token punctuation">)</span>result <span class="token operator">=</span> ctx.eval<span class="token punctuation">(</span>js<span class="token punctuation">)</span>print<span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="我写的代码"><a href="#我写的代码" class="headerlink" title="我写的代码"></a>我写的代码</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> execjsplayer <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token keyword">:</span> <span class="token string">'克里斯-保罗'</span>,    <span class="token string">'image'</span><span class="token keyword">:</span> <span class="token string">'paul.png'</span>,    <span class="token string">'birthday'</span><span class="token keyword">:</span> <span class="token string">'1985-05-06'</span>,    <span class="token string">'height'</span><span class="token keyword">:</span> <span class="token string">'185cm'</span>,    <span class="token string">'weight'</span><span class="token keyword">:</span> <span class="token string">'79.4KG'</span><span class="token punctuation">}</span>with open<span class="token punctuation">(</span><span class="token string">'main.js'</span>, <span class="token string">'r'</span>, encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> as f:    get <span class="token operator">=</span> execjs.compile<span class="token punctuation">(</span>f.read<span class="token punctuation">(</span><span class="token punctuation">))</span>    js <span class="token operator">=</span> <span class="token string">'getToken'</span>    demo <span class="token operator">=</span> get.call<span class="token punctuation">(</span>js, player<span class="token punctuation">)</span>    print<span class="token punctuation">(</span>demo<span class="token punctuation">)</span></code></pre><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>其实区别并不大，我只说一下我认为最重要的区别</p><p>前面的代码效果差不多，我主要讲一下一下两个代码的区别和特点</p><pre class=" language-bash"><code class="language-bash">js <span class="token operator">=</span> f<span class="token string">"getToken({json.dumps(item, ensure_ascii=False)})"</span>result <span class="token operator">=</span> ctx.eval<span class="token punctuation">(</span>js<span class="token punctuation">)</span>js <span class="token operator">=</span> <span class="token string">'getToken'</span>demo <span class="token operator">=</span> get.call<span class="token punctuation">(</span>js, player<span class="token punctuation">)</span></code></pre><p>eval 和 call 方法的区别</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>eval 它参数传入的字符串需要 函数名 + 括号 + 括号里的参数</p><pre class=" language-bash"><code class="language-bash">js <span class="token operator">=</span> f<span class="token string">"getToken({json.dumps(item, ensure_ascii=False)})"</span>result <span class="token operator">=</span> ctx.eval<span class="token punctuation">(</span>js<span class="token punctuation">)</span></code></pre><p>call 只需要函数名，参数可以写在 call 方法的第二个参数</p><pre class=" language-bash"><code class="language-bash">js <span class="token operator">=</span> <span class="token string">'getToken'</span>demo <span class="token operator">=</span> get.call<span class="token punctuation">(</span>js, player<span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也就是说 call 简单一些</p>]]></content>
      
      
      <categories>
          
          <category> 模块使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>崔庆才案例网站 spa7 逆向</title>
      <link href="/2022/022031293.html"/>
      <url>/2022/022031293.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这个在书上已经说了，我这次研究出了新的方法</p><h2 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h2><p>在书上 crypto-js-min.js 文件需要修改，我今天决定自己完成，不看书上的，结果在这里翻了车，最后看书操作，还是不行，跑不起来，我去复制崔庆才的源码，他的源码就可以跑起来，说明这里的修改不只是书上写的那些，还有一些需要修改</p><p>而我这个人很懒，不想一个一个的去比较哪里不一样，所以决定用浏览器调用的方式来调用这个库</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>把 crypto-js-min.js 里的代码全部复制下来，不用做任何修改，创建一个文件，把它粘贴进去</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>把 main.js 的代码按书上的进行修改，在第一行加上一下代码</p><pre class=" language-bash"><code class="language-bash">CryptoJS <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'./crypto-js.min.js'</span><span class="token punctuation">)</span></code></pre><p>意思是把我们的 crypto-js.min.js 导入</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这样比修改代码更简单，也更不容易出错</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="crypto-js-min-js-自己复制，我就不写了"><a href="#crypto-js-min-js-自己复制，我就不写了" class="headerlink" title="crypto-js.min.js 自己复制，我就不写了"></a>crypto-js.min.js 自己复制，我就不写了</h3><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><pre class=" language-bash"><code class="language-bash">CryptoJS <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'./crypto-js.min.js'</span><span class="token punctuation">)</span><span class="token keyword">function</span> getToken<span class="token punctuation">(</span>player<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> CryptoJS.enc.Utf8.parse<span class="token punctuation">(</span><span class="token string">'fipFfVsZsTda94hJNKJfLoaqyqMZFFimwLt'</span><span class="token punctuation">)</span>    const <span class="token punctuation">{</span> name, birthday, height, weight <span class="token punctuation">}</span> <span class="token operator">=</span> player    <span class="token keyword">let</span> base64Name <span class="token operator">=</span> CryptoJS.enc.Base64.stringify<span class="token punctuation">(</span>CryptoJS.enc.Utf8.parse<span class="token punctuation">(</span>name<span class="token punctuation">))</span>    <span class="token keyword">let</span> encrypted <span class="token operator">=</span> CryptoJS.DES.encrypt<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>base64Name<span class="token punctuation">}</span>$<span class="token punctuation">{</span>birthday<span class="token punctuation">}</span>$<span class="token punctuation">{</span>height<span class="token punctuation">}</span>$<span class="token punctuation">{</span>weight<span class="token punctuation">}</span><span class="token variable">`</span></span>, key, <span class="token punctuation">{</span>        mode: CryptoJS.mode.ECB,        padding: CryptoJS.pad.Pkcs7    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> encrypted.toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> execjsplayer <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token keyword">:</span> <span class="token string">'克里斯-保罗'</span>,    <span class="token string">'image'</span><span class="token keyword">:</span> <span class="token string">'paul.png'</span>,    <span class="token string">'birthday'</span><span class="token keyword">:</span> <span class="token string">'1985-05-06'</span>,    <span class="token string">'height'</span><span class="token keyword">:</span> <span class="token string">'185cm'</span>,    <span class="token string">'weight'</span><span class="token keyword">:</span> <span class="token string">'79.4KG'</span><span class="token punctuation">}</span>with open<span class="token punctuation">(</span><span class="token string">'main.js'</span>, <span class="token string">'r'</span>, encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> as f:    get <span class="token operator">=</span> execjs.compile<span class="token punctuation">(</span>f.read<span class="token punctuation">(</span><span class="token punctuation">))</span>    js <span class="token operator">=</span> <span class="token string">'getToken'</span>    demo <span class="token operator">=</span> get.call<span class="token punctuation">(</span>js, player<span class="token punctuation">)</span>    print<span class="token punctuation">(</span>demo<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>curl 转换工具</title>
      <link href="/2022/021910060.html"/>
      <url>/2022/021910060.html</url>
      
        <content type="html"><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> redef parse<span class="token punctuation">(</span>name<span class="token punctuation">)</span>:    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    demo <span class="token operator">=</span> re.findall<span class="token punctuation">(</span><span class="token string">"-H\s'(.*?):\s(.*?)'"</span>, name, re.S<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> demo:        headers<span class="token punctuation">[</span>f<span class="token string">'{i[0]}'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">[</span>1<span class="token punctuation">]</span>    <span class="token keyword">return</span> headers</code></pre><p><strong>这个是模块，可以直接使用</strong></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> parse_curldemo <span class="token operator">=</span> <span class="token string">""</span><span class="token string">"curl '****' \  -H 'authority: ****' \  -H 'cache-control: max-age=0' \  -H 'sec-ch-ua: "</span> Not A<span class="token punctuation">;</span>Brand<span class="token string">";v="</span>99<span class="token string">", "</span>Chromium<span class="token string">";v="</span>98<span class="token string">", "</span>Microsoft Edge<span class="token string">";v="</span>98<span class="token string">"' \  -H 'sec-ch-ua-mobile: ?0' \  -H 'sec-ch-ua-platform: "</span>Windows<span class="token string">"' \  -H 'upgrade-insecure-requests: 1' \  -H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 Edg/98.0.1108.55' \  -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9' \  -H 'sec-fetch-site: same-origin' \  -H 'sec-fetch-mode: navigate' \  -H 'sec-fetch-user: ?1' \  -H 'sec-fetch-dest: document' \  -H 'referer: ****' \  -H 'accept-language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6' \  -H 'cookie: ***' \  -H 'if-modified-since: Mon, 27 Dec 2021 07:45:03 GMT' \  --compressed"</span><span class="token string">""</span>headers <span class="token operator">=</span> parse_curl.parse<span class="token punctuation">(</span>demo<span class="token punctuation">)</span></code></pre><p><strong>可以直接返回字典</strong><br><strong>用这个模块就不用再去网站解析了</strong></p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>崔庆才案例网站 spa6 逆向分析</title>
      <link href="/2022/021532651.html"/>
      <url>/2022/021532651.html</url>
      
        <content type="html"><![CDATA[<h2 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h2><pre class=" language-bash"><code class="language-bash">https://spa6.scrape.center/</code></pre><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre class=" language-bash"><code class="language-bash">msedge 浏览器PyCharmPython 8.8</code></pre><h2 id="分析数据-url"><a href="#分析数据-url" class="headerlink" title="分析数据 url"></a>分析数据 url</h2><pre class=" language-bash"><code class="language-bash">https://spa6.scrape.center/api/movie/?limit<span class="token operator">=</span>10<span class="token operator">&amp;</span>offset<span class="token operator">=</span>0<span class="token operator">&amp;</span>token<span class="token operator">=</span>MWUzZGEwZWUwZDlmZjdhYWY3ZTg0ZjU5ODNmNGY5OWQ1ZWU5N2NlOSwxNjQ0ODkyMTE1</code></pre><blockquote><p>该 url 是 XHR 类型</p></blockquote><p>可以看到 token 值被加密了，然后请求第2页和第3页，发现 limit 的值一直是 10 不变，<br>而 offset 的值会变，当请求第 10 页时， offset 的值是 90</p><h2 id="分析加密过程"><a href="#分析加密过程" class="headerlink" title="分析加密过程"></a>分析加密过程</h2><pre class=" language-bash"><code class="language-bash">url 包含https://spa6.scrape.center/api/movie/?提取断点</code></pre><blockquote><p>在调用堆栈里找到 onFetchData 函数<br>也就是我们点击后所执行的操作</p></blockquote><h2 id="分析-onFetchData-函数"><a href="#分析-onFetchData-函数" class="headerlink" title="分析 onFetchData 函数"></a>分析 onFetchData 函数</h2><pre class=" language-bash"><code class="language-bash"><span class="token string">'onFetchData'</span><span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var _0xd5d754 <span class="token operator">=</span> this<span class="token punctuation">;</span>                    this<span class="token punctuation">[</span><span class="token string">'loading'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">!</span>0x0<span class="token punctuation">;</span>                    var _0x422986 <span class="token operator">=</span> <span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span> - 0x1<span class="token punctuation">)</span> * this<span class="token punctuation">[</span><span class="token string">'limit'</span><span class="token punctuation">]</span>                      , _0x263439 <span class="token operator">=</span> Object<span class="token punctuation">(</span>_0x2fa7bd<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token string">'<span class="token variable">$store</span>'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    this<span class="token punctuation">[</span><span class="token string">'<span class="token variable">$axios</span>'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token string">'<span class="token variable">$store</span>'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span>, <span class="token punctuation">{</span>                        <span class="token string">'params'</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                            <span class="token string">'limit'</span><span class="token keyword">:</span> this<span class="token punctuation">[</span><span class="token string">'limit'</span><span class="token punctuation">]</span>,                            <span class="token string">'offset'</span><span class="token keyword">:</span> _0x422986,                            <span class="token string">'token'</span><span class="token keyword">:</span> _0x263439                        <span class="token punctuation">}</span></code></pre><blockquote><p>可以看到 params 字典内的 token 值是 _0x263439<br>而 _0x263439 的值又等于 _0x263439 &#x3D; Object(_0x2fa7bd[‘a’])(this[‘$store’] 的值</p></blockquote><pre class=" language-bash"><code class="language-bash">在这一行打断点  _0x263439 <span class="token operator">=</span> Object<span class="token punctuation">(</span>_0x2fa7bd<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token string">'<span class="token variable">$store</span>'</span><span class="token punctuation">]</span>然后放开，也就是绿色的三角形按钮</code></pre><p><strong>把 XHR 提取断点关闭再刷新或者下一页</strong></p><blockquote><p>把鼠标放在 (this[‘$store’][‘state’][‘url’][‘index’]) 可以看到值</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token string">'<span class="token variable">$store</span>'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> /api/movie</code></pre><p><strong>把鼠标放在 (_0x2fa7bd[‘a’]) 上可以看到函数 _0x456254</strong><br>点进去看一下内部结构</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> _0x456254<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>var _0x5da681 <span class="token operator">=</span> Math<span class="token punctuation">[</span><span class="token string">'round'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'getTime'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> / 0x3e8<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, _0x2a83dd <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span>, _0x31a891 <span class="token operator">=</span> new Array<span class="token punctuation">(</span>_0x2a83dd<span class="token punctuation">)</span>, _0x596a02 <span class="token operator">=</span> 0x0<span class="token punctuation">;</span> _0x596a02 <span class="token operator">&lt;</span> _0x2a83dd<span class="token punctuation">;</span> _0x596a02++<span class="token punctuation">)</span>                _0x31a891<span class="token punctuation">[</span>_0x596a02<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>_0x596a02<span class="token punctuation">]</span><span class="token punctuation">;</span>            _0x31a891<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x5da681<span class="token punctuation">)</span><span class="token punctuation">;</span>            var _0xf7c3c7 <span class="token operator">=</span> _0x189cbb<span class="token punctuation">[</span><span class="token string">'SHA1'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x31a891<span class="token punctuation">[</span><span class="token string">'join'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">))</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x189cbb<span class="token punctuation">[</span><span class="token string">'enc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Hex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              , _0x3c8435 <span class="token operator">=</span> <span class="token punctuation">[</span>_0xf7c3c7, _0x5da681<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'join'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>              , _0x104b5b <span class="token operator">=</span> _0x358b1f<span class="token punctuation">[</span><span class="token string">'encode'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3c8435<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> _0x104b5b<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>看起来是很复杂，分析一下</p><ol><li><strong>根据最后的 return _0x104b5b 可以知道 _0x104b5b 是我们想要的值</strong></li><li><strong>_0x358b1f[‘encode’] (_0x3c8435) 的值也就是 _0x104b5b</strong></li><li><strong>_0x358b1f[‘encode’] 这个函数先不管，先分析他的参数 _0x3c8435</strong></li><li><strong>就按照上面的方法分析下去，最终到 _0xf7c3c7 这个函数的组成</strong></li><li><strong>把这个函数的代码全部打上断点分析</strong></li></ol><h2 id="分析-0x456254-函数"><a href="#分析-0x456254-函数" class="headerlink" title="分析 _0x456254 函数"></a>分析 _0x456254 函数</h2><blockquote><p>打上断点一个一个的放开可以看到</p></blockquote><pre class=" language-bash"><code class="language-bash">_0x31a891<span class="token punctuation">[</span>_0x596a02<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>_0x596a02<span class="token punctuation">]</span>arguments<span class="token punctuation">[</span>_0x596a02<span class="token punctuation">]</span> <span class="token operator">=</span> /api/movie也就是 _0x31a891<span class="token punctuation">[</span>_0x596a02<span class="token punctuation">]</span> <span class="token operator">=</span> /api/movie</code></pre><blockquote><p>看下一行</p></blockquote><pre class=" language-bash"><code class="language-bash">_0x31a891<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x5da681<span class="token punctuation">)</span>而 _0x5da681 <span class="token operator">=</span> 1644894209 也就是时间戳</code></pre><p><strong>分析得到 _0x5da681 是一个列表</strong></p><pre class=" language-bash"><code class="language-bash">_0x5da681 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/api/movie'</span>,1644894209<span class="token punctuation">]</span></code></pre><blockquote><p>看下一行</p></blockquote><pre class=" language-bash"><code class="language-bash">var _0xf7c3c7 <span class="token operator">=</span> _0x189cbb<span class="token punctuation">[</span><span class="token string">'SHA1'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x31a891<span class="token punctuation">[</span><span class="token string">'join'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">))</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x189cbb<span class="token punctuation">[</span><span class="token string">'enc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Hex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol><li><strong>简单分析有关键字 SHA1 可能是 SHA1 加密</strong></li><li><strong>[‘join’] (‘,’) 这个可能是把 _0x31a891 转换为字符串</strong></li><li><strong>在一个 SHA1 加密网站测试一下</strong></li><li><a href="http://www.ttmd5.com/hash.php?type=5">网站</a></li></ol><pre class=" language-bash"><code class="language-bash">加密参数    /api/movie,1644894209  中间的是英文的逗号加密结果    2b80836e287cab90f8953dc74d614b7ff0941c1a网站调试里的加密结果     2b80836e287cab90f8953dc74d614b7ff0941c1a</code></pre><p>很好，果然是 SHA1 加密</p><blockquote><p>看下一行</p></blockquote><pre class=" language-bash"><code class="language-bash">_0x3c8435 <span class="token operator">=</span> <span class="token punctuation">[</span>_0xf7c3c7, _0x5da681<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'join'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span></code></pre><blockquote><p>调试后发现 _0x3c8435 &#x3D; _0xf7c3c7 也就是说把 _0xf7c3c7 转换成字符串了</p></blockquote><blockquote><p>看下一行</p></blockquote><pre class=" language-bash"><code class="language-bash">_0x104b5b <span class="token operator">=</span> _0x358b1f<span class="token punctuation">[</span><span class="token string">'encode'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3c8435<span class="token punctuation">)</span></code></pre><p>终于分析到这里来了，我们打开 _0x358b1f[‘encode’] 函数看看</p><h2 id="分析-0x358b1f-‘encode’-函数"><a href="#分析-0x358b1f-‘encode’-函数" class="headerlink" title="分析 _0x358b1f[‘encode’] 函数"></a>分析 _0x358b1f[‘encode’] 函数</h2><pre class=" language-bash"><code class="language-bash">_0x45ae25 <span class="token operator">=</span> function<span class="token punctuation">(</span>_0x53d700, _0x4a7a4c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> _0x4a7a4c ? _0x3b6a4b<span class="token punctuation">(</span>String<span class="token punctuation">(</span>_0x53d700<span class="token punctuation">))</span><span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>/<span class="token punctuation">[</span>+\/<span class="token punctuation">]</span>/g, function<span class="token punctuation">(</span>_0x4f1724<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token string">'+'</span> <span class="token operator">==</span> _0x4f1724 ? <span class="token string">'-'</span> <span class="token keyword">:</span> <span class="token string">'_'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>/<span class="token operator">=</span>/g, <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">:</span> _0x3b6a4b<span class="token punctuation">(</span>String<span class="token punctuation">(</span>_0x53d700<span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><blockquote><p>这是个什么鬼东西，看不懂，老规矩，每一行都打下断点</p></blockquote><blockquote><p>结果出乎意料，一放开就回到这一行了</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">return</span> _0x104b5b<span class="token punctuation">;</span></code></pre><p>也就是说，打在 650，651 行的代码不执行，所以我们再分析 649 行的代码</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">return</span> _0x4a7a4c ? _0x3b6a4b<span class="token punctuation">(</span>String<span class="token punctuation">(</span>_0x53d700<span class="token punctuation">))</span><span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>/<span class="token punctuation">[</span>+\/<span class="token punctuation">]</span>/g, function<span class="token punctuation">(</span>_0x4f1724<span class="token punctuation">)</span></code></pre><ol><li><strong>_0x53d700 &#x3D; SHA1 加密的数据</strong></li><li><strong>_0x4a7a4c &#x3D; undefined 也就是未定义的</strong></li><li><strong>String(_0x53d700) 将 _0x53d700 转换成字符串</strong></li><li><strong>因此分析 _0x3b6a4b 函数里的内容</strong></li></ol><h2 id="分析-0x3b6a4b-函数"><a href="#分析-0x3b6a4b-函数" class="headerlink" title="分析 _0x3b6a4b 函数"></a>分析 _0x3b6a4b 函数</h2><pre class=" language-bash"><code class="language-bash">function<span class="token punctuation">(</span>_0x3d0c02<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _0x243a2c<span class="token punctuation">(</span>_0x5d413d<span class="token punctuation">(</span>_0x3d0c02<span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>在这里有多出了两个函数，先分析 _0x5d413d 函数</p></blockquote><h2 id="分析-0x5d413d-函数"><a href="#分析-0x5d413d-函数" class="headerlink" title="分析 _0x5d413d 函数"></a>分析 _0x5d413d 函数</h2><pre class=" language-bash"><code class="language-bash">_0x5d413d <span class="token operator">=</span> function<span class="token punctuation">(</span>_0x5bada1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _0x5bada1<span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x1c5ffc, _0x2eaa23<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>这个分析不出是什么鬼东西，只能 _0x243a2c 这个函数看看做了什么</p></blockquote><h2 id="分析-0x5d413d-函数-1"><a href="#分析-0x5d413d-函数-1" class="headerlink" title="分析 _0x5d413d 函数"></a>分析 _0x5d413d 函数</h2><pre class=" language-bash"><code class="language-bash">_0x243a2c <span class="token operator">=</span> _0x2931cf<span class="token punctuation">[</span><span class="token string">'btoa'</span><span class="token punctuation">]</span> ? function<span class="token punctuation">(</span>_0x17bb1d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _0x2931cf<span class="token punctuation">[</span><span class="token string">'btoa'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x17bb1d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>看到这里就明白了</p></blockquote><ol><li><strong>_0x2931cf[‘btoa’] 这个是 base64 编码</strong></li><li><strong>_0x17bb1d &#x3D; 498e18f8c396e93a320b576f3cff70df34f1c7b7,1644896587</strong></li></ol><p><strong>很好，加了一个时间戳，最后 base64 编码，现在用 Python 模拟加密过程</strong></p><h2 id="Pyhton-模拟加密过程"><a href="#Pyhton-模拟加密过程" class="headerlink" title="Pyhton 模拟加密过程"></a>Pyhton 模拟加密过程</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> base64<span class="token function">import</span> requests<span class="token function">import</span> hashlib<span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> redef sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>:    <span class="token string">""</span><span class="token string">"SHA1 加密"</span><span class="token string">""</span>    <span class="token function">times</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>time.time<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token comment" spellcheck="true"># 不要小数点的时间戳</span>    STR <span class="token operator">=</span> f<span class="token string">"/api/movie,{times}"</span> <span class="token comment" spellcheck="true"># 得到指定的参数</span>    demo <span class="token operator">=</span> hashlib.sha1<span class="token punctuation">(</span>STR.encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">))</span>.hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 进行 SHA1 加密</span>    <span class="token string">""</span><span class="token string">"Base64 加密"</span><span class="token string">""</span>    doc <span class="token operator">=</span> f<span class="token string">"{demo},{times}"</span>.encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将 demo 和 时间戳 再次进行 base64 加密</span>    base <span class="token operator">=</span> base64.b64encode<span class="token punctuation">(</span>doc<span class="token punctuation">)</span>    token <span class="token operator">=</span> re.search<span class="token punctuation">(</span><span class="token string">"b'(.*?)'"</span>, f<span class="token string">"{base}"</span>, re.S<span class="token punctuation">)</span>.group<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将 base 前的 b' 这两个去掉</span>    <span class="token keyword">return</span> token <span class="token comment" spellcheck="true"># 得到 加密后的 token</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Accept'</span><span class="token keyword">:</span> <span class="token string">'application/json, text/plain, */*'</span>,    <span class="token string">'Accept-Encoding'</span><span class="token keyword">:</span> <span class="token string">'gzip, deflate, br'</span>,    <span class="token string">'Accept-Language'</span><span class="token keyword">:</span> <span class="token string">'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6'</span>,    <span class="token string">'Connection'</span><span class="token keyword">:</span> <span class="token string">'keep-alive'</span>,    <span class="token string">'Host'</span><span class="token keyword">:</span> <span class="token string">'spa6.scrape.center'</span>,    <span class="token string">'Referer'</span><span class="token keyword">:</span> <span class="token string">'https://spa6.scrape.center/page/1'</span>,    <span class="token string">'sec-ch-ua'</span><span class="token keyword">:</span> <span class="token string">'" Not A;Brand";v="99", "Chromium";v="98", "Microsoft Edge";v="98"'</span>,    <span class="token string">'sec-ch-ua-mobile'</span><span class="token keyword">:</span> <span class="token string">'?0'</span>,    <span class="token string">'sec-ch-ua-platform'</span><span class="token keyword">:</span> <span class="token string">'"Windows"'</span>,    <span class="token string">'Sec-Fetch-Dest'</span><span class="token keyword">:</span> <span class="token string">'empty'</span>,    <span class="token string">'Sec-Fetch-Mode'</span><span class="token keyword">:</span> <span class="token string">'cors'</span>,    <span class="token string">'Sec-Fetch-Site'</span><span class="token keyword">:</span> <span class="token string">'same-origin'</span>,    <span class="token string">'User-Agent'</span><span class="token keyword">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36 Edg/98.0.1108.50'</span><span class="token punctuation">}</span>def pa_json<span class="token punctuation">(</span><span class="token punctuation">)</span>:    <span class="token string">""</span><span class="token string">"得到 json 数据"</span><span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>0, 100, 10<span class="token punctuation">)</span>:        url <span class="token operator">=</span> f<span class="token string">'https://spa6.scrape.center/api/movie?limit=10&amp;offset={i}&amp;token={sha1()}'</span>        time.sleep<span class="token punctuation">(</span>2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 避免请求太快被禁止访问</span>        r <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url, headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>.json<span class="token punctuation">(</span><span class="token punctuation">)</span>        yield r<span class="token punctuation">[</span><span class="token string">'results'</span><span class="token punctuation">]</span>def parse<span class="token punctuation">(</span><span class="token punctuation">)</span>:    <span class="token string">""</span><span class="token string">"解析 json 数据"</span><span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> pa_json<span class="token punctuation">(</span><span class="token punctuation">)</span>:        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>i<span class="token punctuation">))</span>:            print<span class="token punctuation">(</span>f<span class="token string">"电影名称： {i[k]['name']}"</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span>f<span class="token string">"类型： {i[k]['categories']}"</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span>f<span class="token string">"上映时间： {i[k]['published_at']}"</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span>f<span class="token string">"时长： {i[k]['minute']}"</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span>f<span class="token string">"评分： {i[k]['score']}"</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span><span class="token string">'————————'</span> * 10<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token keyword">:</span>    parse<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="逆向结束"><a href="#逆向结束" class="headerlink" title="逆向结束"></a>逆向结束</h2>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 环境变量</title>
      <link href="/2022/021442812.html"/>
      <url>/2022/021442812.html</url>
      
        <content type="html"><![CDATA[<h2 id="在-nodejs-里创建两个文件夹"><a href="#在-nodejs-里创建两个文件夹" class="headerlink" title="在 nodejs 里创建两个文件夹"></a>在 nodejs 里创建两个文件夹</h2><pre class=" language-bash"><code class="language-bash">node_cachenode_global</code></pre><h2 id="打开-CMD-执行命令"><a href="#打开-CMD-执行命令" class="headerlink" title="打开 CMD 执行命令"></a>打开 CMD 执行命令</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"node_global文件的路径"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"node_cache的文件路径"</span>例如：<span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"D:\nodejs\node_global"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"D:\nodejs\node_cache"</span></code></pre><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><pre class=" language-bash"><code class="language-bash">创建一个名为 NODE_PATH 值为 D:\nodejs\node_global\node_modules 的变量</code></pre><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><pre class=" language-bash"><code class="language-bash">Path 里新建一个 D:\nodejs\node_global\ 变量</code></pre><h2 id="最后将-nodejs-里的所有文件都放-node-global-里面"><a href="#最后将-nodejs-里的所有文件都放-node-global-里面" class="headerlink" title="最后将 nodejs 里的所有文件都放 node_global 里面"></a>最后将 nodejs 里的所有文件都放 node_global 里面</h2><p>在 Python 中运行以下代码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> execjsprint<span class="token punctuation">(</span>execjs.get<span class="token punctuation">(</span><span class="token punctuation">)</span>.name<span class="token punctuation">)</span></code></pre><p>输出结果就是</p><pre class=" language-bash"><code class="language-bash">Node.js <span class="token punctuation">(</span>V8<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyexecJS 调用包</title>
      <link href="/2022/021335107.html"/>
      <url>/2022/021335107.html</url>
      
        <content type="html"><![CDATA[<h2 id="NodeJS-下载的包在-Python-中无法使用"><a href="#NodeJS-下载的包在-Python-中无法使用" class="headerlink" title="NodeJS 下载的包在 Python 中无法使用"></a>NodeJS 下载的包在 Python 中无法使用</h2><h3 id="在-Python-中下载包"><a href="#在-Python-中下载包" class="headerlink" title="在 Python 中下载包"></a>在 Python 中下载包</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> 自己需要的包</code></pre><p>将文件移到自己程序所在的文件夹里就 OK 了</p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 的一些异常</title>
      <link href="/2022/02131510.html"/>
      <url>/2022/02131510.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载包的问题"><a href="#下载包的问题" class="headerlink" title="下载包的问题"></a>下载包的问题</h2><h3 id="下载异常"><a href="#下载异常" class="headerlink" title="下载异常"></a>下载异常</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> ERR<span class="token operator">!</span> code EPERM<span class="token function">npm</span> ERR<span class="token operator">!</span> syscall <span class="token function">mkdir</span><span class="token function">npm</span> ERR<span class="token operator">!</span> path D:\nodejs\node_cache\_cacache<span class="token function">npm</span> ERR<span class="token operator">!</span> errno EPERM<span class="token function">npm</span> ERR<span class="token operator">!</span> FetchError: Invalid response body <span class="token keyword">while</span> trying to fetch https://registry.npmjs.org/crypto-js: EPERM: operation not permitted, <span class="token function">mkdir</span> <span class="token string">'D:\nodejs\node_cache\_cacache'</span></code></pre><p>解决办法: 删除</p><pre class=" language-bash"><code class="language-bash">“C:/Users/用户名”目录下的.npmrc文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyexecJS 的一些异常处理</title>
      <link href="/2022/021340749.html"/>
      <url>/2022/021340749.html</url>
      
        <content type="html"><![CDATA[<h2 id="GBK-编码问题"><a href="#GBK-编码问题" class="headerlink" title="GBK 编码问题"></a>GBK 编码问题</h2><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>打开 subprocess.py 文件，Ctrl + f 搜索 encoding 找到如下的格式的函数</p><pre class=" language-bash"><code class="language-bash">    def __init__<span class="token punctuation">(</span>self, args, bufsize<span class="token operator">=</span>-1, executable<span class="token operator">=</span>None,                 stdin<span class="token operator">=</span>None, stdout<span class="token operator">=</span>None, stderr<span class="token operator">=</span>None,                 preexec_fn<span class="token operator">=</span>None, close_fds<span class="token operator">=</span>True,                 shell<span class="token operator">=</span>False, cwd<span class="token operator">=</span>None, env<span class="token operator">=</span>None, universal_newlines<span class="token operator">=</span>None,                 startupinfo<span class="token operator">=</span>None, creationflags<span class="token operator">=</span>0,                 restore_signals<span class="token operator">=</span>True, start_new_session<span class="token operator">=</span>False,                 pass_fds<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, *, encoding<span class="token operator">=</span>None, errors<span class="token operator">=</span>None, text<span class="token operator">=</span>None<span class="token punctuation">)</span>:        <span class="token string">""</span><span class="token string">"Create new Popen instance."</span><span class="token string">""</span>        _cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>将 encoding 的值修改成 utf-8 即可</p><pre class=" language-bash"><code class="language-bash">    def __init__<span class="token punctuation">(</span>self, args, bufsize<span class="token operator">=</span>-1, executable<span class="token operator">=</span>None,                 stdin<span class="token operator">=</span>None, stdout<span class="token operator">=</span>None, stderr<span class="token operator">=</span>None,                 preexec_fn<span class="token operator">=</span>None, close_fds<span class="token operator">=</span>True,                 shell<span class="token operator">=</span>False, cwd<span class="token operator">=</span>None, env<span class="token operator">=</span>None, universal_newlines<span class="token operator">=</span>None,                 startupinfo<span class="token operator">=</span>None, creationflags<span class="token operator">=</span>0,                 restore_signals<span class="token operator">=</span>True, start_new_session<span class="token operator">=</span>False,                 pass_fds<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, *, encoding<span class="token operator">=</span><span class="token string">"utf-8"</span>, errors<span class="token operator">=</span>None, text<span class="token operator">=</span>None<span class="token punctuation">)</span>:        <span class="token string">""</span><span class="token string">"Create new Popen instance."</span><span class="token string">""</span>        _cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 博客搭建中的异常解决方法</title>
      <link href="/2022/021165054.html"/>
      <url>/2022/021165054.html</url>
      
        <content type="html"><![CDATA[<h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><p><a href="https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">推荐b站视频1</a></p><p><a href="https://www.bilibili.com/video/BV1je41147Ma?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">推荐b站视频2</a> 他的顺序有些乱，完成上面的<br>搭建过程后可以看这个视频搞主题</p><p><a href="https://blog.csdn.net/jspnetcn/article/details/104111651">主题搭建教程，主要看主题！！！</a></p><h2 id="异常解决方法"><a href="#异常解决方法" class="headerlink" title="异常解决方法"></a>异常解决方法</h2><h3 id="上传文件后发现网站没有变化"><a href="#上传文件后发现网站没有变化" class="headerlink" title="上传文件后发现网站没有变化"></a>上传文件后发现网站没有变化</h3><p>有时候需要等待两三分钟才有变化，如果迟迟没有变化就清理缓存</p><pre class=" language-bash"><code class="language-bash">hexo clean</code></pre><p>清理缓存后再运行一下命令</p><pre class=" language-bash"><code class="language-bash">hexo ghexo d</code></pre><h3 id="文件上传不成功"><a href="#文件上传不成功" class="headerlink" title="文件上传不成功"></a>文件上传不成功</h3><pre class=" language-bash"><code class="language-bash">SL SSL_read: Connection was reset, errno 10054FATAL <span class="token punctuation">{</span>  err: Error: Spawn failed      at ChildProcess.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>D:/blog/node_modules/hexo-util/lib/spawn.js:51:21<span class="token punctuation">)</span>      at ChildProcess.emit <span class="token punctuation">(</span>node:events:390:28<span class="token punctuation">)</span>      at ChildProcess.cp.emit <span class="token punctuation">(</span>D:/blog/node_modules/cross-spawn/lib/enoent.js:34:29<span class="token punctuation">)</span>      at Process.ChildProcess._handle.onexit <span class="token punctuation">(</span>node:internal/child_process:290:12<span class="token punctuation">)</span> <span class="token punctuation">{</span>    code: 128  <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p>只是网络问题，重新来几次就行</p><h3 id="代码块中大括号变成符号"><a href="#代码块中大括号变成符号" class="headerlink" title="代码块中大括号变成符号"></a>代码块中大括号变成符号</h3><p>需要手动修改文件，这里我用的是 hexo-prism-plugin 插件，先找到 hexo-prism-plugin 文件，比如我的路径</p><pre class=" language-bash"><code class="language-bash">D:/blog/node_modules/hexo-prism-plugin</code></pre><p>打开文件，找到 src 文件打开，修改 index.js<br>const map &#x3D; {<br>    ‘&#39;’: ‘&#x2F;‘’,<br>    ‘&amp;’: ‘&amp;’,<br>    ‘&gt;’: ‘&gt;’,<br>    ‘&lt;’: ‘&lt;’,<br>    ‘&quot;’: ‘“‘,<br>    ‘&amp;#123;’: ‘{‘,<br>    ‘&amp;#125;’: ‘}’<br>};<br>就 OK 了</p><h2 id="主题的一些功能配置"><a href="#主题的一些功能配置" class="headerlink" title="主题的一些功能配置"></a>主题的一些功能配置</h2><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，在 Hexo 根目录下运行命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre class=" language-bash"><code class="language-bash">highlight:  enable: <span class="token boolean">false</span>prism_plugin:  mode: <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  theme: <span class="token string">'tomorrow'</span>  line_number: <span class="token boolean">false</span>    <span class="token comment" spellcheck="true"># default false</span>  custom_css:</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSDuck分括号</title>
      <link href="/2022/021112057.html"/>
      <url>/2022/021112057.html</url>
      
        <content type="html"><![CDATA[<p>虽然在 PyCharm 里很方便的就能把括号里的混淆代码挖出来<br>但是我就是懒，偏要写一个自动挖代码的工具</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class=" language-bash"><code class="language-bash"><span class="token string">""</span><span class="token string">"JSFuck 加密将括号里的代码筛选出来"</span><span class="token string">""</span>def jie_xi<span class="token punctuation">(</span><span class="token punctuation">)</span>:    with open<span class="token punctuation">(</span><span class="token string">'你的文件路径'</span>, <span class="token string">'r'</span><span class="token punctuation">)</span> as f:        <span class="token keyword">return</span> f.read<span class="token punctuation">(</span><span class="token punctuation">)</span>JS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>def if_true<span class="token punctuation">(</span>i, b<span class="token punctuation">)</span>:    try:        JS<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token string">"{JS[b]}{i}"</span>    except KeyError:        JS<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> idef if_false<span class="token punctuation">(</span><span class="token punctuation">)</span>:    K <span class="token operator">=</span> 0    <span class="token keyword">for</span> k, <span class="token function">v</span> <span class="token keyword">in</span> JS.items<span class="token punctuation">(</span><span class="token punctuation">)</span>:        K <span class="token operator">=</span> int<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">return</span> K + 1def main<span class="token punctuation">(</span><span class="token punctuation">)</span>:    A <span class="token operator">=</span> 0    B <span class="token operator">=</span> 0    <span class="token keyword">for</span> i <span class="token keyword">in</span> jie_xi<span class="token punctuation">(</span><span class="token punctuation">)</span>:        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'('</span><span class="token keyword">:</span>            A +<span class="token operator">=</span> 1            if_true<span class="token punctuation">(</span>i, B<span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">')'</span><span class="token keyword">:</span>            A -<span class="token operator">=</span> 1            if_true<span class="token punctuation">(</span>i, B<span class="token punctuation">)</span>            <span class="token keyword">if</span> A <span class="token operator">==</span> 0:                B <span class="token operator">=</span> if_false<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> A <span class="token operator">!=</span> 0:            if_true<span class="token punctuation">(</span>i, B<span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>JS<span class="token punctuation">[</span>17<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Word</title>
      <link href="/2022/021016107.html"/>
      <url>/2022/021016107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello Word </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
